// <auto-generated />
using System;
using System.Collections;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(MediWebContext))]
    [Migration("20240526155715_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdminType")
                        .HasColumnType("integer")
                        .HasColumnName("admin_type");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("admin_pkey");

                    b.HasIndex(new[] { "UserAccountId" }, "admin_user_account_id_key")
                        .IsUnique();

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("DataLayer.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AppointmentSlotId")
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_slot_id");

                    b.Property<BitArray>("IsApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_approved")
                        .HasDefaultValueSql("(0)::bit(1)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("appointment_pkey");

                    b.HasIndex("PatientId");

                    b.HasIndex(new[] { "AppointmentSlotId" }, "appointment_appointment_slot_id_key")
                        .IsUnique();

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("DataLayer.AppointmentSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinic_id");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_and_time");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_minutes");

                    b.HasKey("Id")
                        .HasName("appointment_slot_pkey");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.ToTable("appointment_slot", (string)null);
                });

            modelBuilder.Entity("DataLayer.Clinic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Pib")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pib");

                    b.Property<string>("WorkHours")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("work_hours");

                    b.HasKey("Id")
                        .HasName("clinic_pkey");

                    b.ToTable("clinic", (string)null);
                });

            modelBuilder.Entity("DataLayer.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("doctor_pkey");

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("DataLayer.DoctorClinics", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint")
                        .HasColumnName("doctor_id");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinic_id");

                    b.Property<long>("SpecializationId")
                        .HasColumnType("bigint")
                        .HasColumnName("specialization_id");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.HasKey("DoctorId", "ClinicId", "SpecializationId")
                        .HasName("doctor_clinics_pkey");

                    b.HasIndex("ClinicId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("doctor_clinics", (string)null);
                });

            modelBuilder.Entity("DataLayer.MedicalEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinic_id");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("medical_employee_pkey");

                    b.HasIndex("ClinicId");

                    b.HasIndex(new[] { "UserAccountId" }, "medical_employee_user_account_id_key")
                        .IsUnique();

                    b.ToTable("medical_employee", (string)null);
                });

            modelBuilder.Entity("DataLayer.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("jmbg");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("patient_pkey");

                    b.HasIndex(new[] { "UserAccountId" }, "patient_user_account_id_key")
                        .IsUnique();

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("DataLayer.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("specialization_name");

                    b.HasKey("Id")
                        .HasName("specialization_pkey");

                    b.ToTable("specialization", (string)null);
                });

            modelBuilder.Entity("DataLayer.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Admin", b =>
                {
                    b.HasOne("DataLayer.UserAccount", "UserAccount")
                        .WithOne("Admin")
                        .HasForeignKey("DataLayer.Admin", "UserAccountId")
                        .IsRequired()
                        .HasConstraintName("admin_user_account_fkey");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("DataLayer.Appointment", b =>
                {
                    b.HasOne("DataLayer.AppointmentSlot", "AppointmentSlot")
                        .WithOne("Appointment")
                        .HasForeignKey("DataLayer.Appointment", "AppointmentSlotId")
                        .IsRequired()
                        .HasConstraintName("appointment_appointment_slot_fkey");

                    b.HasOne("DataLayer.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("appointment_patient_fkey");

                    b.Navigation("AppointmentSlot");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataLayer.AppointmentSlot", b =>
                {
                    b.HasOne("DataLayer.Clinic", "Clinic")
                        .WithMany("AppointmentSlots")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("appointment_slot_clinic_fkey");

                    b.HasOne("DataLayer.Doctor", "Doctor")
                        .WithMany("AppointmentSlots")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("appointment_slot_doctor_fkey");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataLayer.Doctor", b =>
                {
                    b.HasOne("DataLayer.UserAccount", "UserAccount")
                        .WithOne("Doctor")
                        .HasForeignKey("DataLayer.Doctor", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("doctor_user_account_fkey");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("DataLayer.DoctorClinics", b =>
                {
                    b.HasOne("DataLayer.Clinic", "Clinic")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Doctor", "Doctor")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Specialization", "Specialization")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DataLayer.MedicalEmployee", b =>
                {
                    b.HasOne("DataLayer.Clinic", "Clinic")
                        .WithMany("MedicalEmployees")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("medical_employee_clinic_fkey");

                    b.HasOne("DataLayer.UserAccount", "UserAccount")
                        .WithOne("MedicalEmployee")
                        .HasForeignKey("DataLayer.MedicalEmployee", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("medical_employee_user_account_fkey");

                    b.Navigation("Clinic");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("DataLayer.Patient", b =>
                {
                    b.HasOne("DataLayer.UserAccount", "UserAccount")
                        .WithOne("Patient")
                        .HasForeignKey("DataLayer.Patient", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patient_user_account_fkey");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("DataLayer.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("DataLayer.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("DataLayer.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.AppointmentSlot", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("DataLayer.Clinic", b =>
                {
                    b.Navigation("AppointmentSlots");

                    b.Navigation("DoctorClinics");

                    b.Navigation("MedicalEmployees");
                });

            modelBuilder.Entity("DataLayer.Doctor", b =>
                {
                    b.Navigation("AppointmentSlots");

                    b.Navigation("DoctorClinics");
                });

            modelBuilder.Entity("DataLayer.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DataLayer.Specialization", b =>
                {
                    b.Navigation("DoctorClinics");
                });

            modelBuilder.Entity("DataLayer.UserAccount", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalEmployee");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
